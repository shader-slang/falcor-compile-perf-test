/***************************************************************************
 # Copyright (c) 2015-23, NVIDIA CORPORATION. All rights reserved.
 #
 # NVIDIA CORPORATION and its licensors retain all intellectual property
 # and proprietary rights in and to this software, related documentation
 # and any modifications thereto.  Any use, reproduction, disclosure or
 # distribution of this software and related documentation without an express
 # license agreement from NVIDIA CORPORATION is strictly prohibited.
 **************************************************************************/
#pragma once
#include "Utils/HostDeviceShared.slangh"

BEGIN_NAMESPACE_FALCOR

/// This file defines shared types and defines used on the CPU and GPU side
/// for neural materials. It is intended to be #include'ed where it used so
/// that macro definitions are visible.

// clang-format off
#define NEURAL_MATERIAL_INPUT_ENCODING_UNKNOWN                          0
#define NEURAL_MATERIAL_INPUT_ENCODING_IDENTITY                         1
#define NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME                          2
#define NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME_RUSINKIEWICZ_CARTESIAN   3
#define NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME_RUSINKIEWICZ_SPHERICAL   4
// Add more encodings here...
// clang-format on

#ifdef HOST_CODE

/**
 * List of supported input encodings.
 * Each enum corresponds to a hard-coded input encoding that selectable at compile-time.
 */
enum class NeuralMaterialInputEncoding : uint32_t
{
    // clang-format off
    Unknown                         = NEURAL_MATERIAL_INPUT_ENCODING_UNKNOWN,
    Identity                        = NEURAL_MATERIAL_INPUT_ENCODING_IDENTITY,
    ShFrame                         = NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME,
    ShFrame_RusinkiewiczCartesian   = NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME_RUSINKIEWICZ_CARTESIAN,
    ShFrame_RusinkiewiczSpherical   = NEURAL_MATERIAL_INPUT_ENCODING_SHFRAME_RUSINKIEWICZ_SPHERICAL,
    // Add more types here...

    // clang-format on

    Count // Must be last
};

inline std::string to_string(NeuralMaterialInputEncoding encoding)
{
    switch (encoding)
    {
#define tostr(a)                         \
    case NeuralMaterialInputEncoding::a: \
        return #a;
        tostr(Unknown);
        tostr(Identity);
        tostr(ShFrame);
        tostr(ShFrame_RusinkiewiczCartesian);
        tostr(ShFrame_RusinkiewiczSpherical);
        // Add more types here...
#undef tostr
    default:
        FALCOR_THROW("Invalid NeuralMaterialInputEncoding {} passed to to_string()", uint32_t(encoding));
    }
}

#endif // HOST_CODE

END_NAMESPACE_FALCOR
