/***************************************************************************
 # Copyright (c) 2015-23, NVIDIA CORPORATION. All rights reserved.
 # Copyright 2024 The Khronos Group, Inc.
 **************************************************************************/
#pragma once

#include "Utils/HostDeviceShared.slangh"

#ifdef HOST_CODE

#include "MaterialParamLayout.h"

namespace Falcor
{
namespace detail
{
static constexpr float kMaterialParamEpsilon = 1e-4f;
template<typename T>
T clampMaterialParam(T value, T min = T(kMaterialParamEpsilon), T max = T(1.f - kMaterialParamEpsilon))
{
    return math::clamp(value, min, max);
}
} // namespace detail
} // namespace Falcor

#define _EMIT_MATERIAL_PARAM_LAYOUT_ENTRY(type, offset, name, getter, setter, pythonName, ...) \
    MaterialParamLayoutEntry{#name, pythonName, sizeof(type) / 4, offset},

#define _EMIT_MATERIAL_PARAM_SERIALIZE(type, offset, name, getter, setter, pythonName, ...) \
    {                                                                                       \
        type value = material->getter();                                                    \
        params.write(value, offset);                                                        \
    }

#define _EMIT_MATERIAL_PARAM_DESERIALIZE(type, offset, name, getter, setter, pythonName, ...) \
    {                                                                                         \
        type value;                                                                           \
        params.read(value, offset);                                                           \
        if (clamp)                                                                            \
            value = detail::clampMaterialParam(value, ##__VA_ARGS__);                         \
        material->setter(value);                                                              \
    }

#define DEFINE_MATERIAL_PARAM_LAYOUT(materialName_, params_)                                                        \
    struct materialName_##ParamLayout                                                                               \
    {                                                                                                               \
        static const MaterialParamLayout& layout()                                                                  \
        {                                                                                                           \
            static MaterialParamLayout layout = {params_(_EMIT_MATERIAL_PARAM_LAYOUT_ENTRY)};                       \
            return layout;                                                                                          \
        }                                                                                                           \
        static SerializedMaterialParams serialize(const materialName_* material)                                    \
        {                                                                                                           \
            SerializedMaterialParams params;                                                                        \
            params.fill(0.f);                                                                                       \
            params_(_EMIT_MATERIAL_PARAM_SERIALIZE);                                                                \
            return params;                                                                                          \
        }                                                                                                           \
        static void deserialize(materialName_* material, const SerializedMaterialParams& params, bool clamp = true) \
        {                                                                                                           \
            params_(_EMIT_MATERIAL_PARAM_DESERIALIZE);                                                              \
        }                                                                                                           \
    };

#else // HOST_CODE

import Scene.Material.MaterialParamLayout;

#define _EMIT_MATERIAL_PARAM_FIELD(type, offset, name, getter, setter, pythonName, ...) static MaterialParamLayoutEntry name = {offset};

#define DEFINE_MATERIAL_PARAM_LAYOUT(materialName_, params_) \
    struct materialName_##ParamLayout                        \
    {                                                        \
        params_(_EMIT_MATERIAL_PARAM_FIELD)                  \
    };

#endif // HOST_CODE
