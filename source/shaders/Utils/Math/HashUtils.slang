/***************************************************************************
 # Copyright (c) 2015-23, NVIDIA CORPORATION. All rights reserved.
 # Copyright 2024 The Khronos Group, Inc.
 **************************************************************************/

/**
 * This file contains various hash functions and other utilities
 * for pseudorandom number generation.
 */

/**
 * 32-bit (non-cryptographic) hash function by Robert Jenkins.
 * This is a perfect hash function (no collisions).
 * See https://gist.github.com/badboy/6267743.
 */
uint jenkinsHash(uint a)
{
    a = (a + 0x7ed55d16) + (a << 12);
    a = (a ^ 0xc761c23c) ^ (a >> 19);
    a = (a + 0x165667b1) + (a << 5);
    a = (a + 0xd3a2646c) ^ (a << 9);
    a = (a + 0xfd7046c5) + (a << 3);
    a = (a ^ 0xb55a4f09) ^ (a >> 16);
    return a;
}

/**
 * Generates a pair of 32-bit pseudorandom numbers based on a pair of 32-bit values.
 *
 * The code uses a 64-bit block cipher, the Tiny Encryption Algorithm (TEA) by Wheeler et al., 1994.
 * The 128-bit key is fixed and adapted from here: https://www.ibiblio.org/e-notes/webcl/mc.htm.
 * This function can be useful for seeding other pseudorandom number generators.
 *
 * @param[in] v0 The first value (low dword of the block).
 * @param[in] v1 The second value (high dword of the block).
 * @param[in] iterations Number of iterations (the authors recommend 16 at a minimum).
 * @return Two pseudorandom numbers (the block cipher of (v0,v1)).
 */
uint2 blockCipherTEA(uint v0, uint v1, uint iterations = 16)
{
    uint sum = 0;
    const uint delta = 0x9e3779b9;
    const uint k[4] = { 0xa341316c, 0xc8013ea4, 0xad90777d, 0x7e95761e }; // 128-bit key.
    for (uint i = 0; i < iterations; i++)
    {
        sum += delta;
        v0 += ((v1 << 4) + k[0]) ^ (v1 + sum) ^ ((v1 >> 5) + k[1]);
        v1 += ((v0 << 4) + k[2]) ^ (v0 + sum) ^ ((v0 >> 5) + k[3]);
    }
    return uint2(v0, v1);
}
